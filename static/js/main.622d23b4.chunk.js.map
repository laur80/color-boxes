{"version":3,"sources":["helpers.js","Box.js","BoxContainer.js","App.js","serviceWorker.js","index.js"],"names":["choice","arr","Math","floor","random","length","Box","props","useState","color","colors","state","setState","className","style","backgroundColor","onClick","newColor","pickColor","c","BoxContainer","init","numBoxes","allColors","boxes","Array","from","map","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAEA,SAASA,EAAOC,GAEd,OAAOA,EADWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,S,MC4BpCC,MA3Bf,SAAaC,GAAO,IAAD,EAEOC,mBAAS,CAAEC,MAAOT,EAAOO,EAAMG,UAFtC,mBAETC,EAFS,KAEHC,EAFG,KAiBf,OACE,yBACEC,UAAU,MACVC,MAAO,CAAEC,gBAAiBJ,EAAMF,OAChCO,QARN,YARA,WACE,IAAIC,EACJ,GACEA,EAAWjB,EAAOO,EAAMG,cACjBO,IAAaN,EAAMF,OAE5BG,EAAS,CAAEH,MAAOQ,IAGlBC,OCTEC,G,MAAE,eAFA,CAAC,EAAE,EAAE,KAKE,SAASC,IACtB,IAAMC,EAAO,CACXC,SAAU,GACVC,UAAW,CAAC,SAAU,UAAW,SAAU,SAGrCC,EAAQC,MAAMC,KAAK,CAAErB,OAAQgB,EAAKC,WAAYK,IAAI,IACtD,kBAAC,EAAD,CAAKjB,OAAQW,EAAKE,aAGpB,OAAO,yBAAKV,UAAU,gBAAgBW,GAZ1CI,QAAQC,IAAIV,G,MCMGW,MAZf,WAGI,OAEE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCEYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.622d23b4.chunk.js","sourcesContent":["/** Return a random item from a list. */\n\nfunction choice(arr) {\n  let randomIndex = Math.floor(Math.random() * arr.length);\n  return arr[randomIndex];\n}\n\nexport { choice };\n","import React,{ useState } from \"react\";\nimport { choice } from \"./helpers\";\nimport \"./Box.css\";\n\nfunction Box(props){\n  \n    const[state,setState]=useState({ color: choice(props.colors) })\n   \n  \n  function pickColor() {\n    let newColor;\n    do {\n      newColor = choice(props.colors);\n    } while (newColor === state.color);\n\n    setState({ color: newColor });\n  }\n  function handleClick() {\n    pickColor();\n  }\n  \n    return (\n      <div\n        className='Box'\n        style={{ backgroundColor: state.color }}\n        onClick={handleClick}\n      />\n    );\n  \n}\n\nexport default Box;\n","import React from \"react\";\nimport Box from \"./Box\";\nimport \"./BoxContainer.css\";\n\nconst b ={\n  a:1,x:55\n};\nconst a=[1,2,3];\n// const c=Array.from(b);\nconst c={...a}\nconsole.log(c);\n\nexport default function BoxContainer (){\n  const init = {\n    numBoxes: 18,\n    allColors: [\"purple\", \"magenta\", \"violet\", \"pink\"]\n  };\n\n    const boxes = Array.from({ length: init.numBoxes }).map(() => (\n      <Box colors={init.allColors} />\n    ));\n\n    return <div className='BoxContainer'>{boxes}</div>;\n    \n  }\n","import React from \"react\";\nimport BoxContainer from \"./BoxContainer\";\nimport \"./App.css\";\n\nfunction App() {\n \n\n    return (\n   \n      <div className='App'>\n        <BoxContainer />\n      </div>\n    );\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}